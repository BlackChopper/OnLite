package com.hacknife.onlite;


import com.hacknife.onlite.util.ClassValidator;

import com.hacknife.onlite.util.Logger;
import com.hacknife.onlite.util.StringUtil;

import java.util.ArrayList;
import java.util.List;

import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;

/**
 * author  : Hacknife
 * e-mail  : 4884280@qq.com
 * github  : http://github.com/hacknife
 * project : OnLite
 */
public class LiteFile {
    public static final String PROXY = "Lite";
    private final TypeElement typeElement;
    private final String className;
    private final String packageName;
    private final String proxyClassName;
    private final String table;
     
    StringBuilder importBuilder = new StringBuilder();
    StringBuilder clazzBuilder = new StringBuilder();
    private List<Field> fields;

    public LiteFile(Elements elementUtils, TypeElement classElement, String table) {
        this.table = table;
        this.typeElement = classElement;
        PackageElement packageElement = elementUtils.getPackageOf(classElement);
        String packageName = packageElement.getQualifiedName().toString();
        className = ClassValidator.getClassName(classElement, packageName);
        this.packageName = packageName;
        this.proxyClassName = className + PROXY;


    }

    public CharSequence getProxyClassFullName() {
        return packageName + "." + proxyClassName;
    }

    public TypeElement getTypeElement() {
        return typeElement;
    }
 

    public String generateJavaCode(String modulePath) {
        fields = new ArrayList<>();
        ClassParser.parser(modulePath, packageName, className, fields);
        Logger.v(fields.toString());
        importBuilder.append("// Generated by com.hacknife.onlite.processor.OnLiteProcessor (https://github.com/hacknife/OnLite).\n" +
                "// If you have any questions in use, please use email to contact me (e-mail:4884280@qq.com).\n");
        importBuilder.append("package ").append(packageName).append(";\n");
        importBuilder.append("import java.util.ArrayList;\n");
        importBuilder.append("import java.util.List;\n");
        importBuilder.append("import android.database.Cursor;\n");
        importBuilder.append("import android.content.ContentValues;\n");
        importBuilder.append("import com.hacknife.onlite.OnLite;\n");
        clazzBuilder.append("public class " + proxyClassName + " extends OnLite<" + className + "> {\n");
        clazzBuilder.append(generateConstructor());
        clazzBuilder.append(generateCreateTableCode());
        clazzBuilder.append(generateCreateObject());
        clazzBuilder.append(generateContentValues());
        clazzBuilder.append(generateCreateSelection());
        clazzBuilder.append(generateCreateSelectionArgv());
        clazzBuilder.append("\n}");
        return importBuilder.append(clazzBuilder.toString()).toString();
    }

    public String generateCreateTableCode() {
        StringBuilder builder = new StringBuilder();
        builder.append("\n\n    @Override\n" +
                "    protected String createTable() {\n");
        builder.append("        return \"" + Field.CREATE);
        if (table.equalsIgnoreCase("")) {
            builder.append(" ").append(StringUtil.toLowerCaseFirstOne(className)).append(" (\"\n");
        } else {
            builder.append(" ").append(table).append(" (\"\n");
        }
        for (Field field : fields) {
            if (field.getColumn() != null) {
                builder.append("                + \"").append(field.getColumn());
            } else {
                builder.append("                + \"").append(field.getVariable());
            }
            if (field.getAutoInc() != null) {
                builder.append(Field.INTEGER);
            } else if (field.isInteger()) {
                builder.append(Field.INTEGER);
            } else if (field.isDouble()) {
                builder.append(Field.DOUBLE);
            } else if (field.isFloat()) {
                builder.append(Field.FLOAT);
            } else if (field.isString()) {
                builder.append(Field.VACHAR);
            } else if (field.isLong()) {
                builder.append(Field.LONG);
            } else if (field.isShort()) {
                builder.append(Field.SHORT);
            } else if (field.isByte()) {
                builder.append(Field.BLOB);
            } else {
                builder.append(Field.TEXT);
            }
            if (field.getAutoInc() != null) {
                builder.append(Field.PRIMARY_KEY).append(Field.AUTOINCREMENT).append(",\"\n");
            } else if (field.getUnique() != null) {
                builder.append(Field.UNIQUE).append(Field.NOT_NULL).append(",\"\n");
            } else if (field.getNotNull() != null) {
                builder.append(Field.NOT_NULL).append(",\"\n");
            } else {
                builder.append(Field.NULL).append(",\"\n");
            }

        }
        String temp = builder.toString();
        temp = temp.substring(0, temp.length() - 3);
        return temp + ")\";\n    }\n";
    }

    public String generateCreateObject() {
        StringBuilder builder = new StringBuilder();
        builder.append("\n    @Override\n" +
                "    protected " + className + " createObject(Cursor cursor) {\n" +
                "        " + className + " " + StringUtil.toLowerCaseFirstOne(className) + " = new " + className + "();\n");

        for (Field field : fields) {
            if (field.getColumn() == null)
                builder.append("        " + StringUtil.toLowerCaseFirstOne(className) + ".set" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "(cursor.get" + StringUtil.toUpperCaseFirstOne(field.type2Cursor()) + "(cursor.getColumnIndex(\"" + field.getVariable() + "\")));\n");
            else
                builder.append("        " + StringUtil.toLowerCaseFirstOne(className) + ".set" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "(cursor.get" + StringUtil.toUpperCaseFirstOne(field.type2Cursor()) + "(cursor.getColumnIndex(\"" + field.getColumn() + "\")));\n");
        }
        builder.append("        return " + StringUtil.toLowerCaseFirstOne(className) + ";\n" +
                "    }");
        return builder.toString();
    }

    public String generateContentValues() {
        StringBuilder builder = new StringBuilder();
        builder.append("\n\n    @Override\n" +
                "    protected ContentValues createContentValues(" + className + " " + StringUtil.toLowerCaseFirstOne(className) + ") {\n" +
                "        if (" + StringUtil.toLowerCaseFirstOne(className) + " == null) return null;\n" +
                "        ContentValues values = new ContentValues();\n");
        for (Field field : fields) {
            builder.append("        if (" + StringUtil.toLowerCaseFirstOne(className) + ".get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "() != null)\n");
            if (field.getColumn() == null)
                builder.append("            values.put(\"" + field.getVariable() + "\", " + StringUtil.toLowerCaseFirstOne(className) + ".get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "()");
            else
                builder.append("            values.put(\"" + field.getColumn() + "\", " + StringUtil.toLowerCaseFirstOne(className) + ".get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "()");
            if (field.isOther())
                builder.append(".toString());\n");
            else
                builder.append(");\n");
        }
        builder.append("        return values;\n" +
                "    }");

        return builder.toString();
    }

    public String generateCreateSelection() {
        StringBuilder builder = new StringBuilder();
        builder.append("\n\n    @Override\n" +
                "    protected String createSelection(" + className + " where) {\n" +
                "        if (where == null) return null;\n" +
                "        StringBuilder builder = new StringBuilder();\n" +
                "        builder.append(\"1 = 1 \");\n");
        for (Field field : fields) {
            builder.append("        if (where.get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "() != null)\n");
            if (field.getColumn() != null)
                builder.append("            builder.append(\"and \" + \"" + field.getColumn() + " = ? \");\n");
            else
                builder.append("            builder.append(\"and \" + \"" + field.getVariable() + " = ? \");\n");

        }
        builder.append("        return builder.toString();\n" +
                "    }");

        return builder.toString();
    }

    public String generateCreateSelectionArgv() {
        StringBuilder builder = new StringBuilder();
        builder.append("\n\n    @Override\n" +
                "    protected String[] createSelectionArgv(" + className + " where) {\n" +
                "        if (where == null) return null;\n" +
                "        List<String> list = new ArrayList<>();\n");
        for (Field field : fields) {
            builder.append("        if (where.get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "() !=null )\n");
            builder.append("            list.add(String.valueOf(where.get" + StringUtil.toUpperCaseFirstOne(field.getVariable()) + "()));\n");
        }
        builder.append("        return list.toArray(new String[list.size()]);\n" +
                "    }");
        return builder.toString();
    }

    public String generateConstructor() {
        StringBuilder builder = new StringBuilder();
        builder.append("    public " + proxyClassName + "() {\n");
        if (table.equalsIgnoreCase(""))
            builder.append("        tableName = \"" + StringUtil.toLowerCaseFirstOne(className) + "\";\n");
        else
            builder.append("        tableName = \"" + table + "\";\n");
        builder.append("    }");
        return builder.toString();
    }
}
